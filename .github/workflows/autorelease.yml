name: Do automatic release

on:
  schedule:
    - cron:  '10 */4 * * *'

jobs:
  do-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checking auto code...
        uses: actions/checkout@v2

      - name: Fetching last node information...
        id: last_node_release
        run: |
          API_CONTENT=$(curl -sL https://api.github.com/repos/nodejs/node/releases/latest)
          echo "::set-output name=tag::$(echo "$API_CONTENT" | jq -r '.tag_name')"
          echo "::set-output name=url::$(echo "$API_CONTENT" | jq -r '.html_url')"

      - name: Calculating release variant...
        id: release_variant
        run: |
          LAST_RELEASE_TAG=$(git tag -l --sort=-committerdate | grep ^${{ steps.node_version.outputs.tag }} | grep - | head -n 1)
          VARIANT=$(echo "$LAST_RELEASE_TAG" | cut -f2- -d-)
          LAST_RELEASE_COMMIT_HASH=$(git show-ref -s $LAST_RELEASE_TAG)
          if [ "$VARIANT" == "" ]; then
            VARIANT=1
          elif [ "$LAST_RELEASE_COMMIT_HASH" == "$GITHUB_SHA" ]; then
            VARIANT=$(($VARIANT + 1))
          fi;
          NEW_TAG_NAME=${{ steps.last_node_release.outputs.tag }}-$VARIANT
          echo "::set-ouput name=variant::$VARIANT"
          echo "::set-ouput name=tag::$NEW_TAG_NAME"

      - name: Creating release...
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ steps.release_variant.outputs.tag }}
          release_name: ${{ steps.release_variant.outputs.tag }}
          body: |
            Installs [Node ${{ steps.last_node_release.outputs.tag }}](${{ steps.last_node_release.outputs.url }})
          draft: false
          prerelease: false
        continue-on-error: true
