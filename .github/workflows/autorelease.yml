name: Do automatic release

on:
  schedule:
    - cron:  '0 */8 * * *'

jobs:
  do-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checking auto code...
        uses: actions/checkout@v2

      - name: Fetching last node information...
        id: last_node_release
        run: |
          API_CONTENT=$(curl -sL https://api.github.com/repos/nodejs/node/releases/latest)
          echo "::set-output name=tag::$(echo "$API_CONTENT" | jq -r '.tag_name')"
          echo "::set-output name=url::$(echo "$API_CONTENT" | jq -r '.html_url')"

      - name: Calculating release variant...
        id: new_release_data
        run: |
          ALL_RELEASES=$(git tag -l --sort=-committerdate | grep ^${{ steps.node_version.outputs.tag }})
          LAST_RELEASE_TAG=$(echo "$ALL_RELEASES" | grep - | head -n 1)
          echo "ALL: $ALL_RELEASES"
          echo "LAST: $LAST_RELEASE_TAG"
          VARIANT=$(echo "$LAST_RELEASE_TAG" | cut -f2- -d-)
          LAST_RELEASE_COMMIT_HASH=$(git show-ref -s $LAST_RELEASE_TAG)
          NEWLINE=$'\n'
          NEW_RELEASE_MESSAGE="Installs [Node ${{ steps.last_node_release.outputs.tag }}](${{ steps.last_node_release.outputs.url }})"
          NEW_RELEASE_MESSAGE="${NEW_RELEASE_MESSAGE}${NEWLINE}Installer build #${{ steps.new_release_data.outputs.variant }}"
          if [ "$VARIANT" == "" ]; then
            VARIANT=1
          elif [ "$LAST_RELEASE_COMMIT_HASH" != "$GITHUB_SHA" ]; then
            VARIANT=$(($VARIANT + 1))
            CHANGES_BETWEEN_COMMITS=$(git log --oneline $LAST_RELEASE_COMMIT_HASH..HEAD | grep -v Merge | while read line ; do echo " * $line" ; done)
            NEW_RELEASE_MESSAGE="${NEW_RELEASE_MESSAGE}${NEWLINE}${NEWLINE}Installer changes:${NEWLINE}${CHANGES_BETWEEN_COMMITS}"
          fi
          NEW_TAG_NAME=${{ steps.last_node_release.outputs.tag }}-$VARIANT
          echo "::set-output name=variant::$VARIANT"
          echo "::set-output name=tag::$NEW_TAG_NAME"
          echo "::set-output name=release_info::$NEW_RELEASE_MESSAGE"

      - name: Creating release...
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ steps.new_release_data.outputs.tag }}
          release_name: ${{ steps.new_release_data.outputs.tag }}
          body: ${{ steps.new_release_data.outputs.release_info }}
          draft: false
          prerelease: false
        continue-on-error: true
